#!/bin/bash
# ------------- HELP ------------- #

print_help () {
  echo "NAME:" $'\n'$'\t'\
"Bitcoind CLI: control script for starting bitcoind" $'\n'$'\n'\
"COMMAND:" $'\n'$'\t'\
"bitcoind-cli: control script for starting bitcoind" $'\n'$'\n'\
"SUBCOMMANDS:" $'\n'$'\t'\
"help:    show help" $'\n'$'\t'\
"info:    show PIDs" $'\n'$'\t'\
"setup:   setup cli pathing" $'\n'$'\t'\
"log:     tail bitcoind logs" $'\n'$'\t'\
"start:   start bitcoind" $'\n'$'\t'\
"stop:    stop bitcoind" $'\n'$'\t'\
"restart: restart bitcoind (stop + start)"$'\n'$'\n'\
"USAGE:" $'\n'$'\t'\
"% bitcoind-cli subcommand [-arg | -option arg | --option arg]" $'\n'$'\t'\
"% bitcoind-cli help" $'\n'$'\t'\
"% bitcoind-cli info" $'\n'$'\t'\
"% bitcoind-cli setup /path/to/blockchain/data" $'\n'$'\t'\
"% bitcoind-cli log [-both | -mainnet | -testnet | -signet] [-n | --network <both | mainnet | testnet | signet>]" $'\n'$'\t'\
"% bitcoind-cli start [-both | -mainnet | -testnet | -signet] [-n | --network <both | mainnet | testnet | signet>] [-l | -log | --log]" $'\n'$'\t'\
"% bitcoind-cli stop [-both | -mainnet | -testnet | -signet] [-n | --network <both | mainnet | testnet | signet>] [-l | -log | --log]" $'\n'$'\t'\
"% bitcoind-cli restart [-both | -mainnet | -testnet | -signet] [-n | --network <both | mainnet | testnet | signet>] [-l | -log | --log]" $'\n'$'\n'\
"EXAMPLES:" $'\n'$'\t'\
"- help: print info about the command, subcommands, usage and examples" $'\n'$'\t'\
"% bitcoind-cli help" $'\n'$'\n'$'\t'\
"- info: print the PIDs for the bitcoind processes" $'\n'$'\t'\
"% bitcoind-cli info" $'\n'$'\n'$'\t'\
"- setup: set the path to your blockchain data in shell profile" $'\n'$'\t'\
"% bitcoind-cli setup /Volumes/BLOCKCHAIN" $'\n'$'\n'$'\t'\
"- log: print the debug.log files for bitcoind using tail command" $'\n'$'\t'\
"% bitcoind-cli log" $'\n'$'\t'$'\t'\
"[-both | -testnet | -mainnet | -signet]" $'\n'$'\t'$'\t'\
"[-n | --network both | mainnet | testnet | signet]"$'\n'$'\n'$'\t'\
"- start: start bitcoind, default: all & logging disabled" $'\n'$'\t'\
"% bitcoind-cli start" $'\n'$'\t'$'\t'\
"[-both | -testnet | -mainnet | -signet]" $'\n'$'\t'$'\t'\
"[-n | --network both | mainnet | testnet | signet]" $'\n'$'\t'$'\t'\
"[-l | -log | --log]" $'\n'$'\n'$'\t'\
"- stop: stop bitcoind, default: all & logging disabled" $'\n'$'\t'\
"% bitcoind-cli stop" $'\n'$'\t'$'\t'\
"[-both | -testnet | -mainnet | -signet]" $'\n'$'\t'$'\t'\
"[-n | --network both | mainnet | testnet | signet] "$'\n'$'\n'$'\t'\
"- restart: restart bitcoind, default: all & logging disabled" $'\n'$'\t'\
"% bitcoind-cli restart" $'\n'$'\t'$'\t'\
"[-both | -testnet | -mainnet | -signet]" $'\n'$'\t'$'\t'\
"[-n | --network both | mainnet | testnet | signet] "$'\n'$'\n'\
"VERSION:" $'\n'$'\t'\
"0.0.1" $'\n';
  exit 0;
}

# ------------- SETUP ------------- #

setup () {
  BLOCKCHAIN_DIR=${ARGS[1]}
  INTERACTIVE_SETUP=${ARGS[2]}
  if [[ -z $BLOCKCHAIN_DIR ]]; then
    if [[ $INTERACTIVE_SETUP =~ ^(-i|--interactive)$ ]]; then
      interactive_setup;
    fi
    echo "Path arg missing!"
    exit 1;
  fi
  
  if [[ ! -z $BLOCKCHAIN  ]]; then
    echo "BLOCKCHAIN_DIR already set to $BLOCKCHAIN"
    interactive_setup;
  fi;

  finish_setup;
}

interactive_setup () {
  echo "Is that correct? [y/n]"
  read answer
  if [[ $answer =~ ^(y|Y)$ ]]; then
    exit 0;
  else
    echo "Please enter path to your blockchain data:"
    read BLOCKCHAIN_DIR
    finish_setup;
  fi;
}

finish_setup () {
  if [[ $SHELL == "/bin/bash" && -f ~/.bashrc ]]; then
    SHELL_PROFILE=~/.bashrc
  elif [[ $SHELL == "/bin/bash" && -f ~/.bash_profile ]]; then
    SHELL_PROFILE=~/.bash_profile
  elif [[ $SHELL == "/bin/zsh" && -f ~/.zshrc  ]]; then
    SHELL_PROFILE=~/.zshrc
  else
    SHELL_PROFILE=~/.profile
  fi

  echo $'\n'"export BLOCKCHAIN_DIR=$BLOCKCHAIN_DIR" >> $SHELL_PROFILE;
  source $SHELL_PROFILE
  test -z $BLOCKCHAIN_DIR && echo 'Setup failed! Your shell and profile may be improperly setup. Debug info:"$'\n'"SHELL: $SHELL"$'\n'"SHELL_PROFILE: $SHELL_PROFIL' && exit 1;
  echo "BLOCKCHAIN_DIR=$BLOCKCHAIN_DIR"
  echo "bitcoind-cli setup success!"
  exit 0;
}

# ------------- INFO ------------- #

info () {
  case $NETWORK in
    all|"")  if [[ -e "$PID_FILE" && -e "$TESTNET_PID_FILE" ]]; then
                echo "bitcoind PID: $(cat $PID_FILE)";
                echo "bitcoind testnet PID: $(cat $TESTNET_PID)";
              fi;;
    mainnet)  if [[ -e "$PID_FILE" ]]; then
                echo "bitcoind PID: $(cat $PID_FILE)";
              fi;;
    testnet)  if [[ -e "$TESTNET_PID_FILE" ]]; then
                echo "bitcoind testnet PID: $(cat $TESTNET_PID)";
              fi;;
    signet)  if [[ -e "$SIGNET_PID_FILE" ]]; then
                echo "bitcoind testnet PID: $(cat $SIGNET_PID)";
              fi;;
    *) echo "PID file not detected. Are you sure bitcoind on $NETWORK?";;
  esac;
}

# ------------- LOG ------------- #

log () {
  echo "Logging enabled!"
  case $NETWORK in
    all|"") log_all;;
    mainnet) log_mainnet;;
    testnet) log_testnet;;
    signet) log_signet;;
    *) echo "Network arg missing or improperly passed!"
        exit 1;;
  esac;
}

log_all () {
  echo "Logging mainnet $LOG_FILE"
  tail -f $LOG_FILE
  echo "Logging testnet $TESTNET_LOG_FILE"
  tmux new-session -d -s testnet_logs "tail -f /Volumes/BLOCKCHAIN/.bitcoin/testnet3/debug.log"
  tmux attach;
  echo "Logging signet $SIGNET_LOG_FILE"
  tmux new-session -d -s signet_logs "tail -f /Volumes/BLOCKCHAIN/.bitcoin/signet/debug.log"
  tmux attach;
}

log_mainnet () {
  echo "Logging mainnet $LOG_FILE"
  tail -f $LOG_FILE;
}

log_testnet () {
  echo "Logging testnet $TESTNET_LOG_FILE"
  tail -f $TESTNET_LOG_FILE;
}

log_signet () {
  echo "Logging signet $SIGNET_LOG_FILE"
  tail -f $SIGNET_LOG_FILE;
}

# ------------- START / STOP ------------- #

start_stop_restart () {
  case $SUBCOMMAND in
      start) case $NETWORK in
              all|"") start_all;;
              mainnet) start_bitcoind;;
              testnet) start_bitcoind_testnet;;
              signet) start_bitcoind_signet;;
              *) echo "Network arg missing or improperly passed!"; exit 1;;
            esac;;
      stop) case $NETWORK in
              all|"") stop_all;;
              mainnet) stop_bitcoind;;
              testnet) stop_bitcoind_testnet;;
              signet) stop_bitcoind_signet;;
              *) echo "Network arg missing or improperly passed!"; exit 1;;
            esac;;
   restart) case $NETWORK in
              all) restart_all;;
              mainnet|"") restart_bitcoind;;
              testnet) restart_bitcoind_testnet;;
              signet) restart_bitcoind_signet;;
              *) echo "Network arg missing or improperly passed!"; exit 1;;
            esac;;
      *) echo "Subcommand missing or improperly passed!"; exit 1;;
    esac;
}

# ---- START ---- #

start_all () {
  start_bitcoind;
  start_bitcoind_testnet;
  start_bitcoind_signet;
  if [[ ! -z "$LOG" && "$LOG" =~ ^(-l|-log|--log)$ ]]; then
    log;
  fi;
}

start_bitcoind () {
  if [ ! -e "$PID_FILE" ]; then
    /usr/local/bin/bitcoind -conf=$CONF
    echo "Running bitcoind from $BITCOIN"
  else
    echo "Already running bitcoin on mainnet from $BITCOIN"
  fi
  echo "bitcoind PID: $(cat $PID_FILE)";
  
  if [[ ! -z "$LOG" && "$LOG" =~ ^(-l|-log|--log)$ ]]; then
    log;
  fi;
}

start_bitcoind_testnet () {
  if [ ! -e "$TESTNET_PID_FILE" ]; then
    /usr/local/bin/bitcoind -testnet -conf=$CONF
    echo "Running bitcoind testnet from $BITCOIN"
  else
    echo "Already running bitcoind testnet from $BITCOIN"
  fi
  echo "bitcoind testnet PID: $(cat $TESTNET_PID)";

  if [[ ! -z "$LOG" && "$LOG" =~ ^(-l|-log|--log)$ ]]; then
    log;
  fi;
}

start_bitcoind_signet () {
  if [ ! -e "$SIGNET_PID_FILE" ]; then
    /usr/local/bin/bitcoind -signet -conf=$CONF
    echo "Running bitcoind signet from $BITCOIN"
  else
    echo "Already running bitcoind signet from $BITCOIN"
  fi
  echo "bitcoind signet PID: $(cat $SIGNET_PID)";

  if [[ ! -z "$LOG" && "$LOG" =~ ^(-l|-log|--log)$ ]]; then
    log;
  fi;
}

# ---- STOP ---- #

stop_all () {
  stop_bitcoind;
  stop_bitcoind_testnet;
  stop_bitcoind_signet
  if [[ ! -z "$LOG" && "$LOG" =~ ^(-l|-log|--log)$ ]]; then
    log;
  fi;
}

stop_bitcoind () {
  if [ -e "$PID_FILE" ]; then
    /usr/local/bin/bitcoin-cli -conf=$CONF stop
    # do check for bitcoind still starting
    # if kill -9, must remove .pid files
    echo "Stopping bitcoind from $BITCOIN"
    PID=$(cat $PID_FILE)
    echo "bitcoind PID $PID stopped!";
  else
    echo "$PID_FILE file not detected! Are you sure bitcoind is running on mainnet?"
  fi;
}

stop_bitcoind_testnet () {
 if [ -e "$TESTNET_PID_FILE" ]; then
    /usr/local/bin/bitcoin-cli -testnet -conf=$CONF stop
    # do check for bitcoind still starting
    # if kill -9, must remove .pid files
    echo "Stopping bitcoind testnet from $BITCOIN"
    TESTNET_PID=$(cat $TESTNET_PID_FILE)
    echo "bitcoind testnet PID $TESTNET_PID stopped!";
  else
    echo "$TESTNET_PID_FILE file not detected! Are you sure bitcoind is running on testnet?"
  fi;
}

stop_bitcoind_signet () {
 if [ -e "$SIGNET_PID_FILE" ]; then
    /usr/local/bin/bitcoin-cli -signet -conf=$CONF stop
    # do check for bitcoind still starting
    # if kill -9, must remove .pid files
    echo "Stopping bitcoind signet from $BITCOIN"
    SIGNET_PID=$(cat $SIGNET_PID_FILE)
    echo "bitcoind signet PID $SIGNET_PID stopped!";
  else
    echo "$SIGNET_PID_FILE file not detected! Are you sure bitcoind is running on signet?"
  fi;
}

# ------------- RESTART ---------- #
restart_all () {
  stop_all;
  sleep 30;
  start_all;
}

restart_bitcoind () {
  stop_bitcoind;
  sleep 10;
  start_bitcoind;
}

restart_bitcoind_testnet () {
  stop_bitcoind_testnet;
  sleep 10;
  start_bitcoind_testnet;
}

restart_bitcoind_signet () {
  stop_bitcoind_signet;
  sleep 10;
  start_bitcoind_signet;
}

# ------------- VARS, ARGS & SETUP ------------- #

ARGS=($@)

SUBCOMMAND=${ARGS[0]}

if [[ ${ARGS[1]} == "-n" || ${ARGS[1]} == "--network" ]]; then
  NETWORK=${ARGS[2]}
  LOG=${ARGS[3]}
  if [[ ! -z $NETWORK_ARG && -z $NETWORK ]]; then
    echo "Error: Network flag -n | --network passed but no network arg detected!"
  fi
fi

NETWORK_ARG=${ARGS[1]}
NETWORK=$(echo "$NETWORK_ARG" | tr -d -)
LOG=${ARGS[2]}

BLOCKCHAIN=$BLOCKCHAIN_DIR
if [[ ! $SUBCOMMAND =~ ^(help|info|setup)$ && ! -d "$BLOCKCHAIN" ]]; then
  echo "BLOCKCHAIN_DIR=$BLOCKCHAIN not set or improperly set!"
  echo "Please use 'bitcoind-cli setup /path/to/blockchain/data' to set"
  exit 1;
fi


BITCOIN=$BLOCKCHAIN/.bitcoin
CONF=$BITCOIN/bitcoin.conf

LOG_FILE=$BITCOIN/debug.log
PID_FILE=$BITCOIN/bitcoind.pid
if [[ -e $PID_FILE ]]; then
  PID=$(cat $PID_FILE)
fi

TESTNET_LOG_FILE=$BITCOIN/testnet3/debug.log
TESTNET=$BITCOIN/testnet3
TESTNET_PID_FILE=$BITCOIN/testnet3/bitcoind.pid
if [[ -e $TESTNET_PID_FILE ]]; then
  TESTNET_PID=$(cat $TESTNET_PID_FILE)
fi

SIGNET_LOG_FILE=$BITCOIN/signet/debug.log
SIGNET=$BITCOIN/signet
SIGNET_PID_FILE=$BITCOIN/signet/bitcoind.pid
if [[ -e $SIGNET_PID_FILE ]]; then
  SIGNET_PID=$(cat $SIGNET_PID_FILE)
fi

# ------------- SUBCOMMAND CHECK ------------- #
if [[ ! -z $SHELL_PROFILE ]]; then
  source $SHELL_PROFILE
fi

case $SUBCOMMAND in
  help) print_help;;
  info) info;;
  setup) setup;;
  log) log;;
  start|stop|restart) start_stop_restart;;
  *) echo "No subcommand passed!"; exit 1;;
esac