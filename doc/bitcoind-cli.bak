#!/bin/bash
# ------------- HELP ------------- #
OS=$(uname)

print_help () {
  cat ./help.conf
}

# ------------- SETUP ------------- #

setup () {
  DIR=${ARGS[1]}
  INTERACTIVE_SETUP=${ARGS[1]}

  set_shell;

  TEST=$(cat $SHELL_PROFILE | grep BLOCKCHAIN_DIR=)
  if [[ ! -z $TEST ]]; then
    source $SHELL_PROFILE
    prompt_setup;
  elif [[ -z $DIR && -z $INTERACTIVE_SETUP ]]; then
    echo "setup: error: path arg missing. non-interactive setup requires path arg"
    exit 0;
  else
    if [[ -z $BLOCKCHAIN  ]]; then
      echo "setup: please enter path to your blockchain data:"
      read BLOCKCHAIN_DIR
      finish_setup;
    else
      prompt_setup;
    fi
    finish_setup;
  fi

  if [[ -z $BLOCKCHAIN  ]]; then
    echo "setup: error: shell profile may be improperly setup"
    echo "setup: debug info"
    echo "--------- SHELL: $SHELL"
    echo "--------- SHELL_PROFILE: $SHELL_PROFILE"
    exit 1;
  fi
  
  if [[ ! -d $BLOCKCHAIN ]]; then
    echo "setup: disk not mounted"
    echo "setup: would you like to mount disk at $BLOCKCHAIN? [y/n]"
    read DO_MOUNT
    if [[ $DO_MOUNT =~ ^(y|Y)$ ]]; then
      case $OS in
        Darwin) test -z $DISK_NAME && echo "Please run setup to set your disk name"
                DISK=$(diskutil list | grep $DISK_NAME | awk '{print  $8 }')
                diskutil mount $DISK;;
        *) echo "setup: unimplemented auto mount"
           echo "setup: please mount disk manually";;
      esac;
    else
      echo "setup: ok! please mount disk manually"
    fi
  fi

  echo "setup: success: bitcoind-cli"
  exit 0;
}

prompt_setup () {
  echo "setup: BLOCKCHAIN_DIR set to $BLOCKCHAIN"
  echo "setup: correct? [y/N]"
  read ANSWER
  if [[ $ANSWER =~ ^(n|N)$ ]]; then
    echo "setup: please enter path to your blockchain data:"
    read BLOCKCHAIN_DIR
    set_shell;
    finish_setup;
  fi;
  exit 0;
}

set_shell () {
  if [[ $SHELL == "/bin/bash" && -f ~/.bashrc ]]; then
    SHELL_PROFILE=~/.bashrc
  elif [[ $SHELL == "/bin/bash" && -f ~/.bash_profile ]]; then
    SHELL_PROFILE=~/.bash_profile
  elif [[ $SHELL == "/bin/zsh" && -f ~/.zshrc  ]]; then
    SHELL_PROFILE=~/.zshrc
  else
    SHELL_PROFILE=~/.profile
  fi;
}

finish_setup () {
  echo $'\n'"export BLOCKCHAIN_DIR=$BLOCKCHAIN_DIR" >> $SHELL_PROFILE;
  source $SHELL_PROFILE
  echo "BLOCKCHAIN_DIR=$BLOCKCHAIN_DIR"
}

mount_unmount () {
  # TODO: finish additional flags -m, -u, -mount, -unmount, --mount, --unmount 
  COMMAND=$(echo "${ARGS[1]}" | tr -d -)
  case $OS in
    Darwin|Linux) DISK=$(diskutil list | grep $DISK_NAME | awk '{print  $8 }');;
               *) echo "setup: unimplemented auto mount for OS: $OS"
                  echo "setup: please mount disk manually";;
  esac;
  if [[ ! -z $DISK ]]; then
    if [[ ! -z $BLOCKCHAIN ]]; then
      echo "$SUBCOMMAND: do you want to $COMMAND the disk at $BLOCKCHAIN [y/n]";
      read DISK_ANSWER;
      if [[ $DISK_ANSWER =~ ^(y|Y)$ ]]; then
        diskutil $COMMAND $DISK
        SUCCESS=$(echo $!)
        case $SUCCESS in
          0) echo "$COMMAND: $DISK $COMMAND success"
             exit 0;;
          1) echo "$COMMAND: $DISK $COMMAND fail"
             exit 1;;
        esac
      else
        echo "$SUBCOMMAND: ok! please $COMMAND disk manually";
      fi
    else
      echo "$SUBCOMMAND error: BLOCKCHAIN=$BLOCKCHAIN: path to external disk missing! Would you like to run setup to set dir?"
      read SETUP_ANSWER;
      if [[ $SETUP_ANSWER =~ ^(y|Y)$ ]]; then
        echo "$SUBCOMMAND: running setup ..."
        setup;
      else
        echo "$SUBCOMMAND: ok! please run bitcoind-cli setup to set BLOCKCHAIN dir. Run bitcoind-cli help for assistance";
      fi
    fi
  else
    echo "$SUBCOMMAND: disk $COMMAND error: disk not found"
    echo "$SUBCOMMAND: are you sure the disk is mounted?"
    exit 1;
  fi;
}

# ------------- INFO ------------- #

info () {
  if [[ ! -e "$PID_FILE" || ! -e "$TESTNET_PID_FILE" || ! -e "$SIGNET_PID_FILE" ]]; then
    echo "$SUBCOMMAND: No PID files detected"
    if [[ $NETWORK =~ ^(all)$ ]]; then
      NETWORK="mainnet, testnet and/or signet"
    fi
    echo "Are you sure bitcoind is running on $NETWORK?"
    exit 0
  fi
  case $NETWORK in
    all)  if [[ -e "$PID_FILE" && -e "$TESTNET_PID_FILE" && -e "$SIGNET_PID_FILE" ]]; then
                echo "$SUBCOMMAND: bitcoind PID: $(cat $PID_FILE)";
                echo "$SUBCOMMAND: bitcoind testnet PID: $(cat $TESTNET_PID_FILE)";
                echo "$SUBCOMMAND: bitcoind signet PID: $(cat $TESTNET_PID_FILE)";
              else
                if [[ -z $NETWORK ]]; then
                  NETWORK="all"
                fi
              fi;;
    mainnet|"")  if [[ -e "$PID_FILE" ]]; then
                echo "$SUBCOMMAND: bitcoind mainnet PID: $(cat $PID_FILE)";
              fi;;
    testnet)  if [[ -e "$TESTNET_PID_FILE" ]]; then
                echo "$SUBCOMMAND: bitcoind testnet PID: $(cat $TESTNET_PID_FILE)";
              fi;;
    signet)  if [[ -e "$SIGNET_PID_FILE" ]]; then
                echo "$SUBCOMMAND: bitcoind signet PID: $(cat $SIGNET_PID_FILE)";
              fi;;
    *) echo "$SUBCOMMAND: ERROR: Network arg not set!";;
  esac;
}

# ------------- CRASH ------------- #

crash () {
  if [[ -e "$PID_FILE" ]]; then
    echo "$SUBCOMMAND: Are you sure you want to delete pid file at $PID_FILE? [y/N]"
    read DELETE_ANSWER
    if [[ $DELETE_ANSWER =~ ^(y|Y)$ ]]; then
      echo "$SUBCOMMAND: Deleting!"
      rm -rf $BITCOIN/bitcoind.pid
      echo "$SUBCOMMAND: Restart bitcoind? [y/N]"
      read RESTART_ANSWER
      if [[ $RESTART_ANSWER =~ ^(y|Y)$ ]]; then
        start_bitcoind;
      fi
    else
      echo "$SUBCOMMAND: Aborting!"
      exit 0;
    fi
  else
    echo "$SUBCOMMAND: No pid file detected at $PID_FILE"
    interactive_start;
  fi
}

# ------------- LOG ------------- #

log () {
  echo "$SUBCOMMAND: Logging enabled!"
  case $NETWORK in
    all|"") log_all;;
    mainnet|"") log_mainnet;;
    testnet) log_testnet;;
    signet) log_signet;;
    *) echo "$SUBCOMMAND: Network arg missing or improperly passed!"
       exit 1;;
  esac;
}

log_all () {
  echo "$SUBCOMMAND: Logging mainnet $LOG_FILE"
  tail -f $LOG_FILE
  echo "$SUBCOMMAND: Logging testnet $TESTNET_LOG_FILE"
  tmux new-session -d -s testnet_logs "tail -f /Volumes/BLOCKCHAIN/.bitcoin/testnet3/debug.log"
  tmux attach;
  echo "$SUBCOMMAND: Logging signet $SIGNET_LOG_FILE"
  tmux new-session -d -s signet_logs "tail -f /Volumes/BLOCKCHAIN/.bitcoin/signet/debug.log"
  tmux attach;
}

log_mainnet () {
  echo "$SUBCOMMAND: Logging mainnet $LOG_FILE"
  tail -f $LOG_FILE;
}

log_testnet () {
  echo "$SUBCOMMAND: Logging testnet $TESTNET_LOG_FILE"
  tail -f $TESTNET_LOG_FILE;
}

log_signet () {
  echo "$SUBCOMMAND: Logging signet $SIGNET_LOG_FILE"
  tail -f $SIGNET_LOG_FILE;
}

# ------------- START / STOP ------------- #

start_stop_restart () {
  case $SUBCOMMAND in
      start) case $NETWORK in
              all|"") start_all;;
              mainnet|"") start_bitcoind;;
              testnet) start_bitcoind_testnet;;
              signet) start_bitcoind_signet;;
              *) echo "$SUBCOMMAND: Network arg missing or improperly passed!"; exit 1;;
            esac;;
      stop) case $NETWORK in
              all|"") stop_all;;
              mainnet|"") stop_bitcoind;;
              testnet) stop_bitcoind_testnet;;
              signet) stop_bitcoind_signet;;
              *) echo "$SUBCOMMAND: Network arg missing or improperly passed!"; exit 1;;
            esac;;
   restart) case $NETWORK in
              all) restart_all;;
              mainnet|"") restart_bitcoind;;
              testnet) restart_bitcoind_testnet;;
              signet) restart_bitcoind_signet;;
              *) echo "$SUBCOMMAND: Network arg missing or improperly passed!"; exit 1;;
            esac;;
      *) echo "err: Subcommand missing or improperly passed!"; exit 1;;
    esac;
}

interactive_start () {
  echo "$SUBCOMMAND: Start bitcoind? [y/N]"
  read START_ANSWER
  if [[ $START_ANSWER =~ ^(y|Y)$ ]]; then
    echo "$SUBCOMMAND: Which network? [mainnet/testnet/signet]"
    # add check for misspellings
    read NETWORK
    start_bitcoind;
  else
    echo "$SUBCOMMAND: Ok!"
  fi
}

# ---- START ---- #

start_all () {
  start_bitcoind;
  start_bitcoind_testnet;
  start_bitcoind_signet;
  if [[ ! -z "$LOG" && "$LOG" =~ ^(-l|-log|--log)$ ]]; then
    log;
  fi;
}

start_bitcoind () {
  if [ -e "$PID_FILE" ]; then
    echo "$SUBCOMMAND: Bitcoind.pid file detected. Are you already running bitcoind on mainnet from $BITCOIN? [Y/n]"
    read START_ANSWER
    if [[ $START_ANSWER =~ ^(n|N) ]]; then
      BITCOIND_PROCESS_TEST=$(ps aux | grep -v 'grep' | grep 'bitcoind' | awk '{ print $0 }')
      if [[ -z $BITCOIND_PROCESS_TEST ]]; then
        /usr/local/bin/bitcoind -conf=$CONF
        echo "$SUBCOMMAND: Running bitcoind from $BITCOIN"
      else
        echo "$SUBCOMMAND: Bitcoind process detected. Please shut use bitcoind-cli restart."
        exit 0
      fi
    fi
  else
    /usr/local/bin/bitcoind -conf=$CONF
    echo "$SUBCOMMAND: Running bitcoind from $BITCOIN"
  fi
  echo "$SUBCOMMAND: bitcoind PID: $(cat $PID_FILE)";
}

start_bitcoind_testnet () {
  if [ ! -e "$TESTNET_PID_FILE" ]; then
    /usr/local/bin/bitcoind -testnet -conf=$CONF;
    echo "$SUBCOMMAND: Running bitcoind testnet from $BITCOIN";
  else
    echo "$SUBCOMMAND: Already running bitcoind testnet from $BITCOIN";
  fi;
  echo "$SUBCOMMAND: bitcoind testnet PID: $(cat $TESTNET_PID_FILE)";
}

start_bitcoind_signet () {
  if [ ! -e "$SIGNET_PID_FILE" ]; then
    /usr/local/bin/bitcoind -signet -conf=$CONF
    echo "$SUBCOMMAND: Running bitcoind signet from $BITCOIN"
  else
    echo "$SUBCOMMAND: Already running bitcoind signet from $BITCOIN"
  fi;
  echo "$SUBCOMMAND: bitcoind signet PID: $(cat $SIGNET_PID_FILE)";
}

# ---- STOP ---- #

stop_all () {
  stop_bitcoind;
  stop_bitcoind_testnet;
  stop_bitcoind_signet;
  
  if [[ ! -z "$LOG" && "$LOG" =~ ^(-l|-log|--log)$ ]]; then
    log;
  fi;
}

stop_bitcoind () {
  if [ -e "$PID_FILE" ]; then
    /usr/local/bin/bitcoin-cli -conf=$CONF stop
    # do check for bitcoind still starting
    # if kill -9, must remove .pid files
    echo "Stopping bitcoind from $BITCOIN"
    echo "bitcoind PID $(cat $PID_FILE) stopped!";
  else
    echo "$PID_FILE file not detected! Are you sure bitcoind is running on mainnet?"
  fi;
}

stop_bitcoind_testnet () {
 if [ -e "$TESTNET_PID_FILE" ]; then
    /usr/local/bin/bitcoin-cli -testnet -conf=$CONF stop
    # do check for bitcoind still starting
    # if kill -9, must remove .pid files
    echo "$SUBCOMMAND: Stopping bitcoind testnet from $BITCOIN"
    echo "$SUBCOMMAND: bitcoind testnet PID $(cat $TESTNET_PID_FILE) stopped!";
  else
    echo "$SUBCOMMAND: $TESTNET_PID_FILE file not detected! Are you sure bitcoind is running on testnet?"
  fi;
}

stop_bitcoind_signet () {
 if [ -e "$SIGNET_PID_FILE" ]; then
    /usr/local/bin/bitcoin-cli -signet -conf=$CONF stop
    # do check for bitcoind still starting
    # if kill -9, must remove .pid files
    echo "$SUBCOMMAND: Stopping bitcoind signet from $BITCOIN"
    echo "$SUBCOMMAND: bitcoind signet PID $(cat $SIGNET_PID_FILE) stopped!";
  else
    echo "$SUBCOMMAND: $SIGNET_PID_FILE file not detected! Are you sure bitcoind is running on signet?"
  fi;
}

# ------------- RESTART ---------- #
restart_all () {
  stop_all;
  sleep 30;
  start_all;
}

restart_bitcoind () {
  stop_bitcoind;
  sleep 10;
  start_bitcoind;
}

restart_bitcoind_testnet () {
  stop_bitcoind_testnet;
  sleep 10;
  start_bitcoind_testnet;
}

restart_bitcoind_signet () {
  stop_bitcoind_signet;
  sleep 10;
  start_bitcoind_signet;
}

# ------------- VARS, ARGS & SETUP ------------- #

ARGS=($@)

SUBCOMMAND=${ARGS[0]}

if [[ ${ARGS[1]} == "-n" || ${ARGS[1]} == "--network" ]]; then
  NETWORK=${ARGS[2]}
  LOG=${ARGS[3]}
  if [[ ! -z $NETWORK_ARG && -z $NETWORK ]]; then
    echo "$SUBCOMMAND err: Network flag -n | --network passed but no network arg detected!"
  fi
fi

NETWORK_ARG=${ARGS[1]}
NETWORK=$(echo "$NETWORK_ARG" | tr -d -)
LOG=${ARGS[2]}

BLOCKCHAIN=$BLOCKCHAIN_DIR

BITCOIN=$BLOCKCHAIN/.bitcoin
CONF=$BITCOIN/bitcoin.conf

DISK_NAME=$(echo $BLOCKCHAIN | sed 's/[a-zA-Z]*\///g')

LOG_FILE=$BITCOIN/debug.log
PID_FILE=$BITCOIN/bitcoind.pid
if [[ -e $PID_FILE ]]; then
  PID=$(cat $PID_FILE)
fi

TESTNET_LOG_FILE=$BITCOIN/testnet3/debug.log
TESTNET=$BITCOIN/testnet3
TESTNET_PID_FILE=$BITCOIN/testnet3/bitcoind.pid
if [[ -e $TESTNET_PID_FILE ]]; then
  TESTNET_PID=$(cat $TESTNET_PID_FILE)
fi

SIGNET_LOG_FILE=$BITCOIN/signet/debug.log
SIGNET=$BITCOIN/signet
SIGNET_PID_FILE=$BITCOIN/signet/bitcoind.pid
if [[ -e $SIGNET_PID_FILE ]]; then
  SIGNET_PID=$(cat $SIGNET_PID_FILE)
fi

# ------------- SUBCOMMAND CHECK ------------- #
if [[ ! -z $SHELL_PROFILE ]]; then
  source $SHELL_PROFILE
fi

case $SUBCOMMAND in
  help) print_help;;
  info) info;;
  crash) crash;;
  setup) setup;;
  log) log;;
  disk) mount_unmount;;
  start|stop|restart) start_stop_restart;;
  *) echo "err: No subcommand passed!"; exit 1;;
esac